import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import data.Connect
import data.OneStrokeSubject
import data.Vertexes
import kotlin.math.abs

fun main() {
    val rawValue =
        """
            {
              "ret": 0,
              "data": {
                "connects": "[{\"x1\":75,\"y1\":75,\"x2\":225,\"y2\":225},{\"x1\":225,\"y1\":225,\"x2\":75,\"y2\":225},{\"x1\":75,\"y1\":225,\"x2\":225,\"y2\":75},{\"x1\":225,\"y1\":75,\"x2\":225,\"y2\":225},{\"x1\":225,\"y1\":225,\"x2\":375,\"y2\":375},{\"x1\":375,\"y1\":375,\"x2\":225,\"y2\":375},{\"x1\":225,\"y1\":375,\"x2\":75,\"y2\":375},{\"x1\":75,\"y1\":375,\"x2\":225,\"y2\":225},{\"x1\":225,\"y1\":225,\"x2\":375,\"y2\":75},{\"x1\":375,\"y1\":75,\"x2\":375,\"y2\":225},{\"x1\":375,\"y1\":225,\"x2\":375,\"y2\":375},{\"x1\":375,\"y1\":375,\"x2\":525,\"y2\":525},{\"x1\":525,\"y1\":525,\"x2\":525,\"y2\":375},{\"x1\":525,\"y1\":375,\"x2\":525,\"y2\":225},{\"x1\":525,\"y1\":225,\"x2\":525,\"y2\":75},{\"x1\":525,\"y1\":75,\"x2\":225,\"y2\":375},{\"x1\":225,\"y1\":375,\"x2\":75,\"y2\":525},{\"x1\":75,\"y1\":525,\"x2\":375,\"y2\":525},{\"x1\":375,\"y1\":525,\"x2\":525,\"y2\":525},{\"x1\":525,\"y1\":525,\"x2\":675,\"y2\":675},{\"x1\":675,\"y1\":675,\"x2\":675,\"y2\":525},{\"x1\":675,\"y1\":525,\"x2\":675,\"y2\":375},{\"x1\":675,\"y1\":375,\"x2\":675,\"y2\":225},{\"x1\":675,\"y1\":225,\"x2\":675,\"y2\":75},{\"x1\":675,\"y1\":75,\"x2\":75,\"y2\":675},{\"x1\":75,\"y1\":675,\"x2\":225,\"y2\":675},{\"x1\":225,\"y1\":675,\"x2\":375,\"y2\":675},{\"x1\":375,\"y1\":675,\"x2\":525,\"y2\":675},{\"x1\":525,\"y1\":675,\"x2\":675,\"y2\":675},{\"x1\":675,\"y1\":675,\"x2\":525,\"y2\":75},{\"x1\":525,\"y1\":75,\"x2\":75,\"y2\":525},{\"x1\":75,\"y1\":525,\"x2\":675,\"y2\":675},{\"x1\":675,\"y1\":675,\"x2\":525,\"y2\":375},{\"x1\":525,\"y1\":375,\"x2\":375,\"y2\":75},{\"x1\":375,\"y1\":75,\"x2\":75,\"y2\":375},{\"x1\":75,\"y1\":375,\"x2\":375,\"y2\":525},{\"x1\":375,\"y1\":525,\"x2\":675,\"y2\":675},{\"x1\":675,\"y1\":675,\"x2\":225,\"y2\":75},{\"x1\":225,\"y1\":75,\"x2\":75,\"y2\":75},{\"x1\":75,\"y1\":75,\"x2\":75,\"y2\":225},{\"x1\":75,\"y1\":225,\"x2\":75,\"y2\":375},{\"x1\":75,\"y1\":375,\"x2\":75,\"y2\":525},{\"x1\":75,\"y1\":525,\"x2\":75,\"y2\":675},{\"x1\":75,\"y1\":675,\"x2\":375,\"y2\":675},{\"x1\":375,\"y1\":675,\"x2\":675,\"y2\":675},{\"x1\":675,\"y1\":675,\"x2\":675,\"y2\":375},{\"x1\":675,\"y1\":375,\"x2\":675,\"y2\":75},{\"x1\":675,\"y1\":75,\"x2\":525,\"y2\":75},{\"x1\":525,\"y1\":75,\"x2\":375,\"y2\":75},{\"x1\":375,\"y1\":75,\"x2\":225,\"y2\":75}]",
                "vertexes": "[{\"x\":75,\"y\":75},{\"x\":225,\"y\":225},{\"x\":75,\"y\":225},{\"x\":225,\"y\":75},{\"x\":375,\"y\":375},{\"x\":225,\"y\":375},{\"x\":75,\"y\":375},{\"x\":375,\"y\":75},{\"x\":375,\"y\":225},{\"x\":525,\"y\":525},{\"x\":525,\"y\":375},{\"x\":525,\"y\":225},{\"x\":525,\"y\":75},{\"x\":75,\"y\":525},{\"x\":375,\"y\":525},{\"x\":675,\"y\":675},{\"x\":675,\"y\":525},{\"x\":675,\"y\":375},{\"x\":675,\"y\":225},{\"x\":675,\"y\":75},{\"x\":75,\"y\":675},{\"x\":225,\"y\":675},{\"x\":375,\"y\":675},{\"x\":525,\"y\":675}]",
                "vertexCount": "24",
                "img": {}
              }
            }
        """.trimIndent()
    val oneStroke = Gson().fromJson(rawValue, OneStrokeSubject::class.java)
    //节点列表
//    val vertexes =
//        Gson().fromJson<ArrayList<Vertexes>>(oneStroke.data.vertexes, object : TypeToken<ArrayList<Vertexes>>() {}.type)
//    processVertexes(vertexes)
    //连接点列表
    val connects = Gson().fromJson<List<Connect>>(oneStroke.data.connects, object : TypeToken<List<Connect>>() {}.type)
    if (!connects.isNullOrEmpty()){
        println("初始坐标点在：x${getPoint(connects[0].x1)},y${getPoint(connects[0].y1)}")
    }
    //遍历列表
    connects.forEachIndexed { index, it ->
        println("${index + 1}.下一个坐标点：x${getPoint(it.x2)},y${getPoint(it.y2)}")
        //getRelativePoint(it)
    }
}

/**
 * 获取点位
 * @param p 将坐标点转换为可读点
 */
fun getPoint(p: Int): Int {
    val value = if (p > 0) {
        1
    } else {
        -1
    }
    return ((p / 75) + value) / 2
}

/**
 * 获取相对坐标点
 * @param connect 连接点实体对象
 */
fun getRelativePoint(connect: Connect) {
    val diffX = connect.x2 - connect.x1
    val diffY = connect.y2 - connect.y1
    if (diffX != 0) {
        val x = getPoint(diffX)
        print("${if (x > 0) "下" else "上"}${abs(x)}")
    }
    if (diffY != 0) {
        val y = getPoint(diffY)
        print("${if (y > 0) "右" else "左"}${abs(y)}")
    }
    println()
}

/**
 * 排序节点数组
 * 按x排序后，再按y排序
 * @param vertexes 欲排序的节点列表
 */
fun processVertexes(vertexes: ArrayList<Vertexes>) {
    vertexes.sortWith(compareBy({ it.x }, { it.y }))
    vertexes.forEach {
        println("${it.x}, ${it.y}")
    }
    println(vertexes.size)
}